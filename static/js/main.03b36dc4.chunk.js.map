{"version":3,"sources":["components/Card/index.js","components/Scoreboard/index.js","App.js","index.js"],"names":["Cards","props","className","onClick","clickedImage","id","alt","name","src","image","Scoreboard","title","highScore","score","shuffle","array","i","length","j","Math","floor","random","App","state","superMario","showLose","showWin","clickedCharacter","setState","indexOf","handleIncrement","push","activateShuffle","console","log","style","opacity","this","map","Card","key","Component","ReactDOM","render","document","getElementById"],"mappings":"g7CAeeA,G,MAbD,SAAAC,GAAK,OACf,yBAAKC,UAAU,YACf,yBAAKA,UAAU,eAAeC,QAAS,kBAAKF,EAAMG,aAAaH,EAAMI,MACjE,yBAAKH,UAAU,eAAeI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,QAC1D,yBAAKP,UAAU,aACX,yBAAKA,UAAU,cACVD,EAAMM,W,MCYNG,MAjBjB,SAAoBT,GAChB,OACE,4BAAQC,UAAU,cACd,yBAAKA,UAAU,uBAAsB,4BAAKD,EAAMU,QAClD,yBAAKT,UAAU,eAEX,yBAAKA,UAAU,uBAAsB,0CAAgBD,EAAMW,YAC3D,yBAAKV,UAAU,0BAAyB,8CAAoBD,EAAMY,SAEtE,yBAAKX,UAAU,OACf,yBAAKA,UAAU,uBACf,wH,MCRR,SAASY,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IAiHMO,E,4MA5GbC,MAAQ,CACNC,aACAX,MAAO,EACPD,UAAW,EACXa,SAAU,EACVC,QAAS,EACTC,iBAAkB,I,EAIpBvB,aAAe,SAAAC,GAEb,IAAIsB,EAAmB,EAAKJ,MAAMI,iBAC9Bd,EAAQ,EAAKU,MAAMV,MACnBD,EAAY,EAAKW,MAAMX,UAE3B,EAAKgB,SAAS,CACZH,SAAS,EACTC,QAAQ,KAIyB,IAAhCC,EAAiBE,QAAQxB,IAE1B,EAAKyB,kBAELH,EAAiBI,KAAK1B,GAEtB,EAAK2B,kBACLC,QAAQC,IAAR,+BAAoCP,IACpCM,QAAQC,IAAR,iBAAsBrB,KAKM,KAArB,EAAKU,MAAMV,MAElB,EAAKe,SAAS,CACZF,QAAS,EACTb,MAAO,EACPc,iBAAkB,MAKpB,EAAKC,SAAS,CACZf,MAAM,EACNc,iBAAkB,KAEpB,EAAKC,SAAS,CACZH,SAAU,KAIXZ,EAAQD,IAET,EAAKgB,SAAS,CACZhB,UAAWC,IAEboB,QAAQC,IAAR,qBAA0BtB,M,EAK9BkB,gBAAkB,WAChB,EAAKF,SAAS,CAAEf,MAAO,EAAKU,MAAMV,MAAQ,K,EAG5CmB,gBAAkB,WAChB,EAAKJ,SAAS,CAACJ,WAAYV,EAAQU,M,uDAI3B,IAAD,OACP,OAEE,yBAAKtB,UAAU,aAEb,yBAAKA,UAAU,qBAAqBiC,MAAO,CAACC,QAASC,KAAKd,MAAME,WAAhE,+CAGA,yBAAKvB,UAAW,sBAAsBiC,MAAO,CAACC,QAASC,KAAKd,MAAMG,UAAlE,+BAIA,kBAAC,EAAD,CACAf,MAAM,0BACNE,MAAOwB,KAAKd,MAAMV,MAClBD,UAAWyB,KAAKd,MAAMX,YAGtB,yBAAKV,UAAU,aACZmC,KAAKd,MAAMC,WAAWc,KAAI,SAAAd,GAAU,OACrC,kBAACe,EAAD,CAEAC,IAAKhB,EAAWnB,GAChBA,GAAImB,EAAWnB,GACfE,KAAMiB,EAAWjB,KACjBE,MAAOe,EAAWf,MAClBL,aAAc,EAAKA,wB,GArGXqC,a,MCRlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.03b36dc4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\nconst Cards = props => (\r\n    <div className=\"col-md-3\">\r\n    <div className=\"card mx-auto\" onClick={()=> props.clickedImage(props.id)}>\r\n        <img className=\"card-img-top\" alt={props.name} src={props.image}/>\r\n        <div className=\"card-body\">\r\n            <div className=\"card-title\">\r\n                {props.name}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n)\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport \"./scoreboard.css\";\r\n\r\nfunction Scoreboard(props) {\r\n    return (\r\n      <header className=\"scoreBoard\">\r\n          <div className=\"col-md-12 col title\"><h1>{props.title}</h1></div> \r\n        <div className=\"row rowWrap\">\r\n            \r\n            <div className=\"col-md-6 high-score\"><h4>High Score {props.highScore}</h4></div>\r\n            <div className=\"col-md-6 current-score\"><h4>Current Score: {props.score}</h4></div>\r\n            </div>\r\n        <div className=\"row\">\r\n        <div className=\"col-md-12 col intro\" >\r\n        <h6>Click on a Super Mario Character to start! Try to click everyone once and only once!</h6></div>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n  \r\n  export default Scoreboard;","import React, { Component } from 'react';\nimport superMario from \"./cards.json\";\nimport Card from \"./components/Card\";\nimport Scoreboard from './components/Scoreboard';\nimport \"./App.css\"\n//Making use of 'Fisher-Yates-shuffle' algorithm to shuffle a new array order from the current array and returns that New array order.\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n//Using Method class / extends for more features with react\nclass App extends Component{\n  //setting the 'state'\n  state = {\n    superMario,\n    score: 0,\n    highScore: 0,\n    showLose: 0,\n    showWin: 0,\n    clickedCharacter: []\n  };\n\n  //onClick function for Cards\n  clickedImage = id => {\n    //grabbing varibles in the state\n    let clickedCharacter = this.state.clickedCharacter;\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    this.setState({\n      showLose:0,\n      showWin:0\n    });\n\n    //if clickedCharacter doesnt have the id of the image that is clicked then..\n    if(clickedCharacter.indexOf(id)===-1){\n      //call handleIncrement to up the score by 1\n      this.handleIncrement();\n      // push the id to clickedCharacter array\n      clickedCharacter.push(id)\n      //call activateShuffle to shuffle the image's placements and set the new placements for the cards\n      this.activateShuffle();\n      console.log(`ID's Clicked so far: ${clickedCharacter}`);//TEST\n      console.log(`Score: ${score}`)//Test\n      \n      \n    }\n    //If score is equal to the value of '15'\n    else if (this.state.score === 15){\n      //then give showWin the value of '1' and reset the game\n      this.setState({\n        showWin: 1,\n        score: 0,\n        clickedCharacter: []\n      });\n    }\n    //else the image is already clicked and then reset the game and showLose valule set to '1'\n    else{\n      this.setState({\n        score:0,\n        clickedCharacter: []\n      });\n      this.setState({\n        showLose: 1\n      })\n    }\n    //if score is higher than the current highscore\n    if(score > highScore){\n      //set the value of score as the new hishScore\n      this.setState({\n        highScore: score\n      });\n      console.log(`highScore: ${highScore}`)//TEST\n    }\n  }\n\n  //Function to increase the state score\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  }\n  //Function to set the new array order in state\n  activateShuffle = () => {\n    this.setState({superMario: shuffle(superMario)});\n  }\n  \n  //SubClass render() return\n  render() {\n    return(\n\n      <div className=\"container\">\n        {/* Hidden until showWin or ShowLose has a value in the state of a number '1' */}\n        <div className=\"alert alert-danger\" style={{opacity: this.state.showLose}}>\n          Sorry, You clicked that already! Try Again!\n        </div>\n        <div className =\"alert alert-success\" style={{opacity: this.state.showWin}}>\n          Congrats! You Got Them All!\n        </div>\n        {/* ScoreBoard Render with values*/}\n        <Scoreboard\n        title=\"Super Mario Clicky Game\"\n        score={this.state.score}\n        highScore={this.state.highScore}\n        />\n        {/* Card Render with values*/}\n        <div className=\"card-deck\">\n          {this.state.superMario.map(superMario => (\n          <Card\n          \n          key={superMario.id}\n          id={superMario.id}\n          name={superMario.name}\n          image={superMario.image}\n          clickedImage={this.clickedImage}\n          ></Card> \n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}